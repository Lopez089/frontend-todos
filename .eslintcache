[{"/home/juan/Escritorio/AppTodo/frontend/my-app/src/index.tsx":"1","/home/juan/Escritorio/AppTodo/frontend/my-app/src/reportWebVitals.ts":"2","/home/juan/Escritorio/AppTodo/frontend/my-app/src/App.tsx":"3","/home/juan/Escritorio/AppTodo/frontend/my-app/src/components/search/index.tsx":"4"},{"size":478,"mtime":1610299350534,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1610134467848,"results":"7","hashOfConfig":"6"},{"size":170,"mtime":1610299596461,"results":"8","hashOfConfig":"6"},{"size":1630,"mtime":1610309390640,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"18kfbgf",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/juan/Escritorio/AppTodo/frontend/my-app/src/index.tsx",[],["20","21"],"/home/juan/Escritorio/AppTodo/frontend/my-app/src/reportWebVitals.ts",[],"/home/juan/Escritorio/AppTodo/frontend/my-app/src/App.tsx",[],"/home/juan/Escritorio/AppTodo/frontend/my-app/src/components/search/index.tsx",["22"],"import React, {useState, useEffect} from 'react'\n\n\n/* TODO:\n\n    [x] crear el formulario\n    [x] recoger lo que el usuario escribe y guardarlo en el stado\n    SUGERENCIA DE BUSQUEDA\n    [x] crear un estado de eso \n    [x] si el estaqdo estaq basio no lo muestra si el estado exite aparece\n    [x] mostrar datos del stado\n    [x] traer los datos y poner en el stado \n    [x] crear un useeffect cuando se varia la search se busca\n    [] feature selecionar de la sugerencia y se pone en el buscador\n*/\n\n\n\nconst SearchTodo = ()=>{\n    const [search, setSearch] = useState<string | undefined>()\n    const [dropdownSearch, setDorpdownSearch] = useState<string[]>()\n\n    const handleSearch = (e:any): void=>{\n        setSearch(e.target.value)\n    }\n\n    const getSearchSuggestion = async():Promise<void>=> {\n        fetch(`http://localhost:4000/search-todo/?search=${search}`)\n            .then(res => res.json())\n            .then(data => setDorpdownSearch(data.search))\n            .then(Error=> Error)\n    }\n\n    useEffect(()=>{\n        \n        if(search === '') {\n            setDorpdownSearch([])\n        }else{\n            getSearchSuggestion()\n        }\n    },[search])\n\n    return (\n    <>\n        <input type='search' id='search' name='search' onChange={handleSearch}/>\n        <button>Search</button>\n        {\n            dropdownSearch === undefined? (\n                null\n            ): (\n                <div className=\"dropdown-content\">\n                    {dropdownSearch.map((input:string , i:number)=> <p key={i}>{input}</p>)}\n                </div>\n            )\n        }\n    </>\n    )\n}\n\nexport default SearchTodo",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":41,"column":7,"nodeType":"29","endLine":41,"endColumn":15,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getSearchSuggestion'. Either include it or remove the dependency array.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [getSearchSuggestion, search]",{"range":"36","text":"37"},[1161,1169],"[getSearchSuggestion, search]"]