[{"/home/juan/Escritorio/AppTodo/frontend/my-app/src/index.tsx":"1","/home/juan/Escritorio/AppTodo/frontend/my-app/src/reportWebVitals.ts":"2","/home/juan/Escritorio/AppTodo/frontend/my-app/src/App.tsx":"3","/home/juan/Escritorio/AppTodo/frontend/my-app/src/components/search/index.tsx":"4","/home/juan/Escritorio/AppTodo/frontend/my-app/src/components/AddTodo/index.tsx":"5","/home/juan/Escritorio/AppTodo/frontend/my-app/src/API.ts":"6","/home/juan/Escritorio/AppTodo/frontend/my-app/src/components/TodoItem/index.tsx":"7"},{"size":478,"mtime":1610299350534,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1610134467848,"results":"10","hashOfConfig":"9"},{"size":1837,"mtime":1611082929512,"results":"11","hashOfConfig":"9"},{"size":1630,"mtime":1610309390640,"results":"12","hashOfConfig":"9"},{"size":1093,"mtime":1610562227806,"results":"13","hashOfConfig":"9"},{"size":2014,"mtime":1611082871707,"results":"14","hashOfConfig":"9"},{"size":652,"mtime":1610724033744,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"18kfbgf",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/juan/Escritorio/AppTodo/frontend/my-app/src/index.tsx",[],["33","34"],"/home/juan/Escritorio/AppTodo/frontend/my-app/src/reportWebVitals.ts",[],"/home/juan/Escritorio/AppTodo/frontend/my-app/src/App.tsx",[],"/home/juan/Escritorio/AppTodo/frontend/my-app/src/components/search/index.tsx",["35"],"import React, {useState, useEffect} from 'react'\n\n\n/* TODO:\n\n    [x] crear el formulario\n    [x] recoger lo que el usuario escribe y guardarlo en el stado\n    SUGERENCIA DE BUSQUEDA\n    [x] crear un estado de eso \n    [x] si el estaqdo estaq basio no lo muestra si el estado exite aparece\n    [x] mostrar datos del stado\n    [x] traer los datos y poner en el stado \n    [x] crear un useeffect cuando se varia la search se busca\n    [] feature selecionar de la sugerencia y se pone en el buscador\n*/\n\n\n\nconst SearchTodo = ()=>{\n    const [search, setSearch] = useState<string | undefined>()\n    const [dropdownSearch, setDorpdownSearch] = useState<string[]>()\n\n    const handleSearch = (e:any): void=>{\n        setSearch(e.target.value)\n    }\n\n    const getSearchSuggestion = async():Promise<void>=> {\n        fetch(`http://localhost:4000/search-todo/?search=${search}`)\n            .then(res => res.json())\n            .then(data => setDorpdownSearch(data.search))\n            .then(Error=> Error)\n    }\n\n    useEffect(()=>{\n        \n        if(search === '') {\n            setDorpdownSearch([])\n        }else{\n            getSearchSuggestion()\n        }\n    },[search])\n\n    return (\n    <>\n        <input type='search' id='search' name='search' onChange={handleSearch}/>\n        <button>Search</button>\n        {\n            dropdownSearch === undefined? (\n                null\n            ): (\n                <div className=\"dropdown-content\">\n                    {dropdownSearch.map((input:string , i:number)=> <p key={i}>{input}</p>)}\n                </div>\n            )\n        }\n    </>\n    )\n}\n\nexport default SearchTodo","/home/juan/Escritorio/AppTodo/frontend/my-app/src/components/AddTodo/index.tsx",[],["36","37"],"/home/juan/Escritorio/AppTodo/frontend/my-app/src/API.ts",[],"/home/juan/Escritorio/AppTodo/frontend/my-app/src/components/TodoItem/index.tsx",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":41,"column":7,"nodeType":"44","endLine":41,"endColumn":15,"suggestions":"45"},{"ruleId":"38","replacedBy":"46"},{"ruleId":"40","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getSearchSuggestion'. Either include it or remove the dependency array.","ArrayExpression",["50"],["48"],["49"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [getSearchSuggestion, search]",{"range":"53","text":"54"},[1161,1169],"[getSearchSuggestion, search]"]